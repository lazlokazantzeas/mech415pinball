// replace this in colission.cpp

void flipperCollision(Ball& ball, Flipper& flipper, bool pivotAtRight) {
	const double PI = 3.141592653589793;

	
	double ex, ey;
	if (pivotAtRight) {
		ex = flipper.px - flipper.length * cos(-flipper.angle * PI / 180.0);
		ey = flipper.py + flipper.length * sin(-flipper.angle * PI / 180.0);
	}
	else {
		ex = flipper.px + flipper.length * cos(flipper.angle * PI / 180.0);
		ey = flipper.py - flipper.length * sin(flipper.angle * PI / 180.0);
	}


	double fx = ex - flipper.px;
	double fy = ey - flipper.py;
	double flipperLengthSquared = fx * fx + fy * fy;

	// Project ball center onto flipper line
	double t = ((ball.x - flipper.px) * fx + (ball.y - flipper.py) * fy) / flipperLengthSquared;
	t = max(0.0, min(1.0, t));

	// Closest point on flipper
	double closestX = flipper.px + t * fx;
	double closestY = flipper.py + t * fy;

	// Vect closest point to ball
	double distX = ball.x - closestX;
	double distY = ball.y - closestY;
	double distance = sqrt(distX * distX + distY * distY);

	if (distance < ball.radius) {
		// Resolve overlap
		double overlap = ball.radius - distance;
		ball.x += (overlap * distX) / distance;
		ball.y += (overlap * distY) / distance;

		// Calculate and normal vector
		double normalX = distX / distance;
		double normalY = distY / distance;

		// Uno reverse card
		double dotProduct = ball.vx * normalX + ball.vy * normalY;
		ball.vx -= 2 * dotProduct * normalX;
		ball.vy -= 2 * dotProduct * normalY;

		

		// Debug
		circle_creator(closestX, closestY, 20, 5.0);
	}
}
